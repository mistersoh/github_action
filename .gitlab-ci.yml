variables:
  APP_NAME: gitops-argocd-demo
  CI_REGISTRY_IMAGE: mistersoh/$APP_NAME
  CD_CHART_REPO: cicd-test
  CD_GIT_REPOSITORY: http://192.168.108.46:8081/root/$CD_CHART_REPO.git
  CD_MANIFEST_FILE: Chart.yaml
  TAG: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

# stages:
#   - build
#   - deploy

# before_script:
#   - echo $CI_REGISTRY_IMAGE:$TAG $PWD
#   # login
#   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD

# after_script:
#   - docker image prune -af

# build_image:
#   stage: build
#   script:
#     # Docker Build && Push image
#     - cat Dockerfile
#     - docker pull $CI_REGISTRY_IMAGE:latest || true
#     - >
#       docker build
#       --cache-from $CI_REGISTRY_IMAGE:latest
#       --tag $CI_REGISTRY_IMAGE:$TAG
#       .
#     - docker push $CI_REGISTRY_IMAGE:$TAG

# tag_latest_image:
#   stage: deploy
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker pull $CI_REGISTRY_IMAGE:$TAG
#     - docker tag $CI_REGISTRY_IMAGE:$TAG $CI_REGISTRY_IMAGE:latest
#     - docker push $CI_REGISTRY_IMAGE:latest



#----------------------------------------------------------------------------------


stages:
  - build
  - publish
  - deploy-dev
  - deploy-prod

build:
  stage: build
  image:
    name: golang:1.13.1
  script:
    - go build -o main main.go
  artifacts:
    paths:
      - main
  variables:
    CGO_ENABLED: 0

publish:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "./Dockerfile"
      --destination "docker.io/${CI_REGISTRY_IMAGE}:0.1"
  # rules:
  #   - if: $CI_COMMIT_TAG
  # dependencies:
  #   - build  
  # only:
  #   - master

# deploy-dev:
#   stage: deploy-dev
#   image: alpine:3.8
#   before_script:
#     - apk add --no-cache git curl bash
#     - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
#     - mv kustomize /usr/local/bin/
#     - git remote set-url origin https://${CI_USERNAME}:${CI_PUSH_TOKEN}@192.168.108.46:8081/root/cicd-test.git
#     - git config --global user.email "gitlab@gitlab.com"
#     - git config --global user.name "GitLab CI/CD"
#   script:
#     - git checkout -B master
#     - cd deployment/dev
#     - kustomize edit set image $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - cat kustomization.yaml
#     - git commit -am 'DEV image update'
#     - git push origin master
#   only:
#     - master

# deploy-prod:
#   stage: deploy-prod
#   image: alpine:3.8
#   before_script:
#     - apk add --no-cache git curl bash
#     - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
#     - mv kustomize /usr/local/bin/
#     - git remote set-url origin https://${CI_USERNAME}:${CI_PUSH_TOKEN}@192.168.108.46:8081/root/cicd-test.git
#     - git config --global user.email "gitlab@gitlab.com"
#     - git config --global user.name "GitLab CI/CD"
#   script:
#     - git checkout -B master
#     - git pull origin master
#     - cd deployment/prod
#     - kustomize edit set image $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - cat kustomization.yaml
#     - git commit -am 'PROD image update'
#     - git push origin master
#   only:
#     - master
#   when: manual
